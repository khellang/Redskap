<#@ template language="C#" culture="en-US" #>
<#@ output extension=".g.cs" encoding="utf-8" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
// <auto-generated>
//   This code was auto generated from https://www.bring.no/postnummerregister-ansi.txt.
//   Last generation time: <#= DateTime.UtcNow.ToString("o") #>
// </auto-generated>

namespace Redskap
{
    using System.Collections.Generic;

    /// <summary>
    /// Utility for looking up and validating Norwegian postcodes.
    /// </summary>
    /// <remarks>
    /// The lookup was last generated from Bring's postcode register on <#= DateTime.Now.ToString("dddd, MMMM d, yyyy", CultureInfo.InvariantCulture) #>.
    /// </remarks>
    public static partial class PostCodes
    {
        private static readonly Dictionary<short, string> Map = new()
        {
<# foreach (var postCode in GetPostCodes()) { #>
            { <#= postCode.Value #>, "<#= postCode.PostalName #>" },
<# } #>
        };
    }
}
<#+
    private class PostCode
    {
        public PostCode(string value, string postalName, string municipalityNumber, string municipalityName, char category)
        {
            Value = value;
            PostalName = postalName;
            MunicipalityNumber = municipalityNumber;
            MunicipalityName = municipalityName;
            Category = category;
        }

        public string Value { get; }

        public string PostalName { get; }

        public string MunicipalityNumber { get; }

        public string MunicipalityName { get; }

        public char Category { get; }
    }

    private static IEnumerable<PostCode> GetPostCodes()
    {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

        using var client = new WebClient();

        using var stream = client.OpenRead("https://www.bring.no/postnummerregister-ansi.txt");
        using var reader = new StreamReader(stream, Encoding.GetEncoding("ISO-8859-1"));

        string line;
        while ((line = reader.ReadLine()) != null)
        {
            var parts = line.Split('\t');
            yield return new PostCode(parts[0], parts[1], parts[2], parts[3], parts[4][0]);
        }
    }
#>